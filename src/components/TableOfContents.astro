---
import TableOfContentsHeading from "./TableOfContentsHeading.astro";

interface TreeItem {
	depth: number;
}
function buildTree(flatArray: TreeItem[]) {
	const root: { children: any[] } = { children: [] };
	const stack = [root];

	flatArray.forEach((item) => {
		// Ensure the stack matches the item's depth level
		while (stack.length > item.depth) {
			stack.pop();
		}

		// Attach item as a child of the current parent in the stack
		const parent = stack[stack.length - 1];
		const newNode = { ...item, children: [] };
		parent.children.push(newNode);

		// Add the new node to the stack
		stack.push(newNode);
	});

	return root.children;
}

const { headings } = Astro.props;

const headingsTree = buildTree(headings);
---

<nav class="relative h-fit flex" data-toc>
	<ul class:list={["grid w-fit gap-3 pl-2"]} data-toc-list-top>
		{headingsTree.map((node) => <TableOfContentsHeading heading={node} />)}
	</ul>
</nav>
